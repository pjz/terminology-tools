#!/usr/bin/python3

import sys
import string
import os.path
import functools

import click

from blessings import Terminal

from xdg_icon import icon as icon_for

def memoize(obj):
    cache = obj.cache = {}

    @functools.wraps(obj)
    def memoizer(*args, **kwargs):
        key = str(args) + str(kwargs)
        if key not in cache:
            cache[key] = obj(*args, **kwargs)
        return cache[key]
    return memoizer


class TerminologyTerm(object):

    @staticmethod
    def cmds(c):
        """
        returns a bytestring containing the command
        """
        return b'\x1b}' + c.encode('utf8') + b'\x00'

    @classmethod
    def cmd(cls, cmd):
        """
        send the specified cmd
        """
        cmds = cls.cmds(cmd)
        sys.stdout.flush()
        sys.stdout.buffer.write(cmds)
        sys.stdout.flush()

    @classmethod
    def qs(cls):
        """
        return terminal width, height (in charblocks) and
        charblock width and height
        """
        cls.cmd('qs')
        qs = sys.stdin.readline(20).strip().split(';')
        return (int(i) for i in qs)

    @classmethod
    def ibie(cls, width, rchar='!'):
        cls.cmd('ib')
        print(rchar*width, end='')
        cls.cmd('ie')

    @classmethod
    def it(cls, width, height, path, rchar='!', link=None, disp=None):
        it = 'it{}{!s};{!s};'.format(rchar, width, height)
        if link:
            it += link + '\n'
        it += path
        if disp:
            it += '\n' + disp
        cls.cmd(it)
        cls.ibie(width, rchar)


class NameGrid(object):
    def __init__(self, names, size, debug=False):
        self.names = names
        self.term = TerminologyTerm()
        self.sizename = size
        self.size = dict(self.SIZES)[size]
        self.debug = debug

    SIZES = ( ('small', (2, 1)),
              ('medium', (4, 2)),
              ('large',(8, 4)),
              ('huge',(16, 8))
             )

    def __repr__(self):
        msg = '<NameGrid (%s) %d names on %r column screen>' % (self.sizename, len(self.names), Terminal().width)
        return msg

    @memoize
    def cols(self):
        #w, h, fw, fh = self.term.qs()
        w = Terminal().width
        if w is None:
            # if not a tty, .width is None
            return 1
        # -1 in case we'd use the last column
        return (w-1) // self.colwidth()

    @memoize
    def rows(self):
        n = len(self.names)
        rows = n // self.cols()
        if n % self.cols() != 0:
            rows += 1
        return rows

    @memoize
    def colwidth(self):
        namemaxlen = max(len(n) for n in self.names)
        colwidth = 1              # buffer space before icon
        colwidth += self.size[0]  # icon width
        colwidth += 1             # buffer space after icon
        colwidth += namemaxlen
        return colwidth

    def rowheight(self):
        return self.size[1]

    def format_name(self, name, i, rchar):
        """
        return the i'th row of 'name' formatted
        into a grid square
        """
        w, h = self.size
        if name:
            if self.debug:
                print(w * rchar, end='')
            elif i == 0:
                filename = os.path.abspath(name)
                disp = icon_for(filename)
                self.term.it(w, h, filename, rchar=rchar, disp=disp)
            else:
                self.term.ibie(w, rchar=rchar)
                name = ''
        width = self.colwidth()  # full width
        width -= self.size[0]    # icon width (in .ibie() call above)
        width -= 1               # buffer space after icon
        fmt = " {:<" + str(width) + "}"
        return fmt.format(name)


def getitem(l, i, default):
    """
    return l[i] unless it would cause IndexError, then
    return default
    """
    try:
        return l[i]
    except IndexError:
        return default


@click.command()
@click.option('--all', '-a', is_flag=True, default=False, help="show hidden files")
@click.option('--size', default='small', type=click.Choice(name for name, size in NameGrid.SIZES),
              help="icon size")
@click.option('--debug', is_flag=True, default=False, help="turn on debugging")
@click.argument('files', nargs=-1, type=click.Path(exists=True))
def main(all, size, debug, files):

    names = list(files)
    if not files:
        names = os.listdir()
        if not all:
            names = [ n for n in names if not n.startswith('.') ]
    names.sort()

    grid = NameGrid(names, size, debug=debug)
    if debug:
        print("Grid is " + repr(grid))

    cols = grid.cols()

    for gridrow in range(grid.rows()):
        for itemrow in range(grid.rowheight()):
            for gridcol in range(grid.cols()):
                i = gridcol * grid.rows() + gridrow
                name = getitem(names, i, '')
                end = '\n' if gridcol == cols - 1 else ''
                rchar = string.printable[gridcol % len(string.printable)]
                print(grid.format_name(name, itemrow, rchar), end=end)


if __name__ == '__main__':
    main()

